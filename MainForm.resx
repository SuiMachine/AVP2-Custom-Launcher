<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        FBEvFhAwFhEsFRIuFRInFBAlFBImFBAlFBEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdFBEdFREAAAAAAAAAAAAAAAAAAAAAAACIVUe5i34oFA8q
        FBAkFRAkFBAlFBAkFRAmFBAoFBAoFBAqFREpFA8nFREpFBAmFREpFRAkFBAhFBAkFRApFREmFBAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAcFREAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>